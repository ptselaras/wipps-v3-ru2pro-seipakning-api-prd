#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.
FROM mcr.microsoft.com/dotnet/aspnet:3.1-alpine AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/dotnet/sdk:3.1-alpine AS build
WORKDIR /src
COPY ["WIPPS API 3.0/WIPPS API 3.0.csproj", "WIPPS API 3.0/"]
COPY ["EmailService/EmailService.csproj", "EmailService/"]
RUN dotnet restore "WIPPS API 3.0/WIPPS API 3.0.csproj"
COPY . .
WORKDIR "/src/WIPPS API 3.0"
RUN dotnet build "WIPPS API 3.0.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "WIPPS API 3.0.csproj" -c Release -o /app/publish

FROM surnet/alpine-wkhtmltopdf:3.8-0.12.5-full as wkhtmltopdf
FROM base AS final
WORKDIR /app

# Install dependencies for wkhtmltopdf
RUN apk add --no-cache \
  libstdc++ \
  libx11 \
  libxrender \
  libxext \
  libssl1.1 \
  ca-certificates \
  fontconfig \
  freetype \
  ttf-dejavu \
  ttf-droid \
  ttf-freefont \
  ttf-liberation \
  ttf-ubuntu-font-family \
  libc6-compat \
&& apk add --no-cache --virtual .build-deps \
  msttcorefonts-installer \
\
# Install microsoft fonts
&& update-ms-fonts \
&& fc-cache -f \
\
# Clean up when done
&& rm -rf /tmp/* \
&& apk del .build-deps

# Copy wkhtmltopdf files from docker-wkhtmltopdf image
COPY --from=wkhtmltopdf /bin/wkhtmltopdf /bin/wkhtmltopdf
COPY --from=wkhtmltopdf /bin/wkhtmltoimage /bin/wkhtmltoimage
COPY --from=wkhtmltopdf /bin/libwkhtmltox* /bin/

COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "WIPPS API 3.0.dll"]